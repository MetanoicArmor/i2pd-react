const { app, BrowserWindow, ipcMain, dialog, shell, Menu, Tray, nativeImage } = require('electron');
const http = require('http');
const path = require('path');
const os = require('os');
const { spawn, exec } = require('child_process');
const fs = require('fs');
const Store = require('electron-store');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const store = new Store();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let mainWindow;
let tray;
let daemonProcess = null;
let daemonPID = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ dev —Ä–µ–∂–∏–º
const isDev = process.env.ELECTRON_IS_DEV === '1';

// –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
function createWindow() {
  // –ò–∫–æ–Ω–∫–∞ –æ–∫–Ω–∞
  const windowIconPath = path.join(__dirname, 'icon.png');

  mainWindow = new BrowserWindow({
    width: 1000,
    height: 750,
    minWidth: 800,
    minHeight: 600,
    titleBarStyle: 'hiddenInset',
    vibrancy: 'under-window',
    visualEffectState: 'active',
    backgroundColor: '#1C1C1E',
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false,
      preload: path.join(__dirname, 'preload.js')
    },
    show: true,
    icon: fs.existsSync(windowIconPath) ? windowIconPath : undefined
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ Dock –Ω–∞ macOS
  try {
    if (process.platform === 'darwin') {
      const dockIconPath = path.join(__dirname, 'icon.png');
      if (fs.existsSync(dockIconPath) && app.dock && typeof app.dock.setIcon === 'function') {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–Ω–∞—á–æ–∫ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –≤ —Å—Ç–∏–ª–µ macOS
        createRoundedImageFromPng(dockIconPath, 256, Math.round(256 * 0.22))
          .then((rounded) => {
            if (rounded && !rounded.isEmpty()) {
              app.dock.setIcon(rounded);
            }
          })
          .catch(() => {
            const dockImage = nativeImage.createFromPath(dockIconPath);
            if (dockImage && !dockImage.isEmpty()) {
              app.dock.setIcon(dockImage);
            }
          });
      }
    }
  } catch (e) {
    console.log('Failed to set Dock icon:', e.message);
  }

  // URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  const startUrl = isDev ? 'http://localhost:3000' : `file://${path.join(__dirname, '../build/index.html')}`;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const loadApp = async () => {
    try {
      console.log('Trying to load:', startUrl);
      await mainWindow.loadURL(startUrl);
      console.log('Successfully loaded React app');
    } catch (error) {
      console.error('Failed to load React app:', error);
      
      const errorHtml = `
        <html>
          <head>
            <meta charset="utf-8" />
            <title>I2P Daemon GUI</title>
          </head>
          <body style="background: #1C1C1E; color: white; font-family: -apple-system, BlinkMacSystemFont, sans-serif; padding: 40px; text-align: center;">
            <h1>I2P Daemon GUI</h1>
            <p style="color: #ff6b6b;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
            <p>React dev server –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>
            <div style="background: #333; padding: 20px; border-radius: 10px; margin: 20px; text-align: left;">
              <p><strong>–†–µ—à–µ–Ω–∏–µ:</strong></p>
              <ol>
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞</li>
                <li>–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code style="background: #555; padding: 5px; border-radius: 3px;">npm start</code></li>
                <li>–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è "Compiled successfully!"</li>
                <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Electron</li>
              </ol>
            </div>
            <p style="color: #888;">–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: <code style="background: #555; padding: 5px; border-radius: 3px;">./start.sh</code></p>
          </body>
        </html>
      `;
      
      await mainWindow.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(errorHtml)}`);
    }
  };

  loadApp();

  // –°–æ–±—ã—Ç–∏—è –æ–∫–Ω–∞
  mainWindow.once('ready-to-show', () => {
    console.log('Electron window ready to show');
    mainWindow.show();
    console.log('Electron window shown and focused');
  });

  mainWindow.webContents.once('did-finish-load', () => {
    console.log('Electron window content loaded');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
    mainWindow.webContents.executeJavaScript(`
      try {
        console.log('Checking React app...');
        console.log('Document ready state:', document.readyState);
        const rootElement = document.getElementById('root');
        console.log('React root element:', rootElement);
        if (rootElement) {
          console.log('React root content:', rootElement.innerHTML.substring(0, 200) + '...');
        }
      } catch (error) {
        console.error('Error checking React app:', error);
      }
    `).catch(error => {
      console.error('Failed to execute JavaScript:', error);
    });
  });

  mainWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
    console.error('Failed to load:', errorCode, errorDescription);
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ–∫–Ω–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ—è
  mainWindow.on('minimize', (event) => {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ store
    const store = new Store();
    const minimizeToTray = store.get('minimizeToTray', true);
    
    if (minimizeToTray) {
      event.preventDefault();
      mainWindow.hide();
      console.log('üîÑ –û–∫–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π');
    }
  });

  mainWindow.on('close', (event) => {
    if (isDev) {
      app.quit();
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ store
      const store = new Store();
      const closeToTray = store.get('closeToTray', true);
      
      if (closeToTray && tray) {
        event.preventDefault();
        mainWindow.hide();
        console.log('üîÑ –û–∫–Ω–æ —Å–∫—Ä—ã—Ç–æ –≤ —Ç—Ä–µ–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏');
      } else {
        app.quit();
      }
    }
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—è
  createTray();
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ—è
async function createTray() {
  try {
    let image = null;

    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –∏–∫–æ–Ω–∫–µ —Ç—Ä–µ—è
    const possibleIconPaths = [
      path.join(__dirname, 'tray-icon.png'),                    // –í public/ (dev mode)
      path.join(process.resourcesPath, 'app.asar.unpacked', 'public', 'tray-icon.png'), // –í —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
      path.join(process.resourcesPath, 'public', 'tray-icon.png'), // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
      path.join(__dirname, '..', 'public', 'tray-icon.png'),   // –ò–∑ build/
      path.join(__dirname, 'icon.png'),                         // –û—Å–Ω–æ–≤–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –∫–∞–∫ fallback
    ];

    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å PNG –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π
    for (const iconPath of possibleIconPaths) {
      if (fs.existsSync(iconPath)) {
        try {
          const stats = fs.statSync(iconPath);
          if (stats && stats.size >= 512) {
            const fileImage = nativeImage.createFromPath(iconPath);
            if (fileImage && !fileImage.isEmpty()) {
              // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç—Ä–µ—è (22x22 –¥–ª—è macOS)
              image = fileImage.resize({ width: 22, height: 22 });
              console.log('‚úÖ Tray icon loaded from:', iconPath);
              break;
            }
          }
        } catch (e) {
          console.log('‚ö†Ô∏è Failed to load tray icon from:', iconPath, e.message);
        }
      }
    }

    // –ü–æ–ø—ã—Ç–∫–∞: SVG –∏–∑ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)
    if (!image) {
      const svgPaths = [
        path.join(__dirname, '..', 'theatermasks.fill.svg'),
        path.join(process.resourcesPath, 'theatermasks.fill.svg'),
      ];
      
      for (const svgPath of svgPaths) {
        if (fs.existsSync(svgPath)) {
          try {
            image = await createImageFromSvg(svgPath, 22);
            console.log('‚úÖ Tray icon created from SVG:', svgPath);
            break;
          } catch (e) {
            console.log('‚ö†Ô∏è SVG to tray conversion failed:', svgPath);
          }
        }
      }
    }

    // –§–æ–ª–±—ç–∫: –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∏–∫–æ–Ω–∫–∞ (22x22) —á–µ—Ä–µ–∑ base64
    if (!image) {
      console.log('‚ö†Ô∏è Using fallback base64 tray icon');
      const fallbackBase64 =
        'iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAAACXBIWXMAAAsSAAALEgHS3X78AAABF0lEQVQ4y+2VMU7CQBBF3yqC1cAE3kB2Qh0h0cJ0gk0t0Gg1sR2M3kQm4mZ9r8aC0m1t2gQp6j8Qm8f0m0bV9j8QbN8i8g0qH7wYI0b8eN0m1b1m4mRr2w5H8iI6Yw9i3yQkJk8m3tZ0sJk4mQyVa0J2i4r8y7v+g9i1wB4mB+oihqg1Gdq7kKfBf0qk8S2y2mIu2gqKXySx5xkYqjZQmKQ2c7r2r7JHVk7wz3m8c9gq5vJmS6wC0sXthxg2y9yJXbH3wJY0K1k0pQGxfyC0A2mZ4k7aZqk2QmQ4iQ7ADxZqfF5jY6YyG+S6mBz7s8Aq3q9xkC7m4wq3m6wH3bH3v6wA7nN3zX9h0H5wM3E2bD7A/Jp3zv9gJ3G7oG0m6Hk9s7bAAAAAElFTkSuQmCC';
      image = nativeImage.createFromDataURL(`data:image/png;base64,${fallbackBase64}`).resize({ width: 22, height: 22 });
    }

    tray = new Tray(image);
    updateTrayStatus('Stopped');
    
    tray.on('click', () => {
      if (mainWindow) {
        if (mainWindow.isVisible()) {
          mainWindow.hide();
        } else {
          mainWindow.show();
          mainWindow.focus();
        }
      }
    });
  } catch (error) {
    console.error('Failed to create tray:', error);
  }
}

// –†–µ–Ω–¥–µ—Ä–∏–º SVG –≤ offscreen-–æ–∫–Ω–µ –∏ –¥–µ–ª–∞–µ–º nativeImage
function createImageFromSvg(svgFilePath, size = 22) {
  return new Promise((resolve, reject) => {
    const win = new BrowserWindow({
      width: size,
      height: size,
      show: false,
      frame: false,
      transparent: true,
      webPreferences: {
        offscreen: true,
        backgroundThrottling: false
      }
    });

    const fileUrl = `file://${svgFilePath}`;

    win.webContents.once('did-finish-load', async () => {
      try {
        const image = await win.webContents.capturePage({ x: 0, y: 0, width: size, height: size });
        win.destroy();
        const resized = image.resize({ width: size, height: size });
        resolve(resized);
      } catch (e) {
        win.destroy();
        reject(e);
      }
    });

    win.webContents.once('did-fail-load', (_e, code, desc) => {
      try { win.destroy(); } catch (_) {}
      reject(new Error(`Failed to load SVG: ${code} ${desc}`));
    });

    win.loadURL(fileUrl);
  });
}

// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ –∏–∑ PNG
function createRoundedImageFromPng(pngPath, size = 256, radius = 56) {
  return new Promise((resolve, reject) => {
    const win = new BrowserWindow({
      width: size,
      height: size,
      show: false,
      frame: false,
      transparent: true,
      webPreferences: {
        offscreen: true,
        backgroundThrottling: false
      }
    });

    // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º PNG –≤ data URL, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let base64 = '';
    try {
      const buf = fs.readFileSync(pngPath);
      base64 = buf.toString('base64');
    } catch (e) {
      reject(e);
      return;
    }

    const html = `
      <html>
        <body style="margin:0;background:transparent;">
          <div id="wrap" style="width:${size}px;height:${size}px;border-radius:${radius}px;overflow:hidden;">
            <img id="img" src="data:image/png;base64,${base64}" style="width:100%;height:100%;object-fit:cover;display:block;"/>
          </div>
          <script>
            const img = document.getElementById('img');
            if (img.complete) {
              document.title = 'ready';
            } else {
              img.onload = () => { document.title = 'ready'; };
              img.onerror = () => { document.title = 'error'; };
            }
          </script>
        </body>
      </html>
    `;

    win.loadURL(`data:text/html;charset=utf-8,${encodeURIComponent(html)}`);

    win.webContents.once('did-finish-load', async () => {
      try {
        // –ñ–¥–µ–º, –ø–æ–∫–∞ <img> —Ä–µ–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
        await win.webContents.executeJavaScript(`
          new Promise((resolve) => {
            if (document.title === 'ready') return resolve();
            const iv = setInterval(() => {
              if (document.title === 'ready') { clearInterval(iv); resolve(); }
            }, 20);
            setTimeout(() => { clearInterval(iv); resolve(); }, 300);
          })
        `);
        const image = await win.webContents.capturePage({ x: 0, y: 0, width: size, height: size });
        try { win.destroy(); } catch (_) {}
        resolve(image);
      } catch (e) {
        try { win.destroy(); } catch (_) {}
        reject(e);
      }
    });

    win.webContents.once('did-fail-load', (_e, code, desc) => {
      try { win.destroy(); } catch (_) {}
      reject(new Error(`Failed to render rounded icon: ${code} ${desc}`));
    });
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ—è
function updateTrayStatus(status) {
  if (!tray) {
    console.log('Tray not initialized, skipping status update');
    return;
  }
  
  const isRunning = status === 'Running';
  
  const contextMenu = Menu.buildFromTemplate([
    {
      label: `–°—Ç–∞—Ç—É—Å: ${isRunning ? '–ó–∞–ø—É—â–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`,
      enabled: false
    },
    { type: 'separator' },
    {
      label: '–ó–∞–ø—É—Å—Ç–∏—Ç—å daemon',
      type: 'checkbox',
      checked: isRunning,
      click: () => {
        if (!isRunning) {
          // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω
          startDaemonInternal();
        }
      }
    },
    {
      label: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon',
      click: () => {
        if (isRunning) {
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ–Ω
          stopDaemonInternal();
        }
      }
    },
    {
      label: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å daemon',
      click: () => {
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω
        if (isRunning) {
          stopDaemonInternal().then(() => {
            setTimeout(() => {
              startDaemonInternal();
            }, 2000);
          });
        } else {
          startDaemonInternal();
        }
      }
    },
    { type: 'separator' },
    {
      label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      accelerator: 'CmdOrCtrl+,',
      click: () => {
        if (mainWindow) {
          mainWindow.show();
          mainWindow.focus();
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
          mainWindow.webContents.send('open-settings');
        }
      }
    },
    {
      label: '–í–µ–±-–∫–æ–Ω—Å–æ–ª—å',
      click: () => {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å i2pd
        shell.openExternal('http://127.0.0.1:7070');
      }
    },
    {
      label: '–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ',
      click: () => {
        if (mainWindow) {
          mainWindow.show();
          mainWindow.focus();
        }
      }
    },
    { type: 'separator' },
    {
      label: '–°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π',
      click: () => {
        if (mainWindow) {
          mainWindow.hide();
        }
      }
    },
    {
      label: '–í—ã–π—Ç–∏',
      click: () => {
        app.quit();
      }
    }
  ]);
  
  tray.setContextMenu(contextMenu);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∏–∑ Dock –Ω–∞ macOS
  updateDockVisibility();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ Dock –Ω–∞ macOS
function updateDockVisibility() {
  if (process.platform === 'darwin' && app.dock) {
    const store = new Store();
    const hideFromDock = store.get('hideFromDock', false);
    
    if (hideFromDock) {
      app.dock.hide();
      console.log('üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ –∏–∑ Dock');
    } else {
      app.dock.show();
      console.log('üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ Dock');
    }
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏ i2pd (–ø–æ—Ä—Ç 7070)
function parseI2pdWebconsole(html) {
  const pick = (re) => {
    const m = html.match(re);
    return m ? m[1] : undefined;
  };

  const num = (re) => {
    const v = pick(re);
    return v ? parseInt(v, 10) : 0;
  };

  const str = (re) => pick(re) || '';

  const uptime = str(/Uptime:\s*(?:<\/b>\s*)?(\d+:\d+:\d+)/i);
  const activeTunnels = num(/Tunnels:\s*(?:<\/b>\s*)?(\d+)/i);
  const peerCount = num(/Routers:\s*(?:<\/b>\s*)?(\d+)/i);
  const bytesReceived = (() => {
    const m = html.match(/Received:\s*(?:<\/b>\s*)?([\d.]+)\s*(\w+)/i);
    return m ? `${m[1]} ${m[2]}` : '0 B';
  })();
  const bytesSent = (() => {
    const m = html.match(/Sent:\s*(?:<\/b>\s*)?([\d.]+)\s*(\w+)/i);
    return m ? `${m[1]} ${m[2]}` : '0 B';
  })();
  const inboundTunnels = num(/Client tunnels:\s*(?:<\/b>\s*)?(\d+)/i);
  const transitTunnels = num(/Transit tunnels:\s*(?:<\/b>\s*)?(\d+)/i);
  const networkStatus = str(/Network status:\s*(?:<\/b>\s*)?(\w+)/i) || 'Unknown';
  const dataPath = str(/Data path:\s*(?:<\/b>\s*)?([^\n<]+)/i) || '';

  return {
    success: true,
    uptime,
    activeTunnels,
    peerCount,
    bytesReceived,
    bytesSent,
    inboundTunnels,
    outboundTunnels: Math.max(activeTunnels - inboundTunnels, 0),
    transitTunnels,
    networkStatus,
    dataPath,
    lastUpdate: Date.now()
  };
}

async function getDaemonStats() {
  return await new Promise((resolve) => {
    const req = http.get('http://127.0.0.1:7070', (res) => {
      let data = '';
      res.setEncoding('utf8');
      res.on('data', (chunk) => (data += chunk));
      res.on('end', () => {
        try {
          const parsed = parseI2pdWebconsole(data);
          resolve(parsed);
        } catch (e) {
          resolve({ success: false, error: e.message });
        }
      });
    });
    req.on('error', (err) => resolve({ success: false, error: err.message }));
    req.setTimeout(4000, () => {
      req.destroy();
      resolve({ success: false, error: 'Timeout' });
    });
  });
}

// –ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ i2pd
function findI2pdExecutable() {
  const platform = process.platform;
  let possiblePaths = [];
  
  if (platform === 'darwin') {
    // macOS: –∏—â–µ–º –≤ –ø–∞–ø–∫–µ Mac
    possiblePaths = [
      // –í —Å–æ–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (extraResources)
      path.join(process.resourcesPath, 'Mac', 'i2pd'),
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      path.join(__dirname, '..', 'Mac', 'i2pd'),
      path.join(__dirname, 'Mac', 'i2pd'),
      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏
      '/usr/local/bin/i2pd',
      '/opt/homebrew/bin/i2pd',
      '/usr/local/sbin/i2pd'
    ];
  } else if (platform === 'win32') {
    // Windows: –∏—â–µ–º –≤ –ø–∞–ø–∫–µ Win
    possiblePaths = [
      // –í —Å–æ–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (extraResources)
      path.join(process.resourcesPath, 'Win', 'i2pd.exe'),
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      path.join(__dirname, '..', 'Win', 'i2pd.exe'),
      path.join(__dirname, 'Win', 'i2pd.exe'),
      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏
      'C:\\Program Files\\i2pd\\i2pd.exe',
      'C:\\Program Files (x86)\\i2pd\\i2pd.exe'
    ];
  } else {
    // Linux: –∏—â–µ–º –≤ –ø–∞–ø–∫–µ Lin
    possiblePaths = [
      // –í —Å–æ–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (extraResources)
      path.join(process.resourcesPath, 'Lin', 'i2pd'),
      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      path.join(__dirname, '..', 'Lin', 'i2pd'),
      path.join(__dirname, 'Lin', 'i2pd'),
      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏
      '/usr/local/bin/i2pd',
      '/usr/bin/i2pd',
      '/usr/local/sbin/i2pd',
      '/usr/sbin/i2pd',
      path.join(process.env.HOME || '', '.local', 'bin', 'i2pd')
    ];
  }

  for (const execPath of possiblePaths) {
    if (fs.existsSync(execPath)) {
      console.log(`Found i2pd executable at: ${execPath}`);
      return execPath;
    }
  }

  console.error('i2pd executable not found in any of the expected locations');
  return null;
}

// –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
async function checkDaemonStatusInternal() {
  try {
    const executablePath = findI2pdExecutable();
    if (!executablePath) {
      return { success: false, error: 'i2pd –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ' };
    }

    return new Promise((resolve) => {
      exec(`ps aux | grep 'i2pd.*--conf.*i2pd.conf' | grep -v grep | awk '{print $2}' | head -1`, (error, stdout) => {
        if (error || !stdout.trim()) {
          resolve({ 
            success: true, 
            isRunning: false, 
            uptime: '00:00:00',
            peerCount: 0,
            bytesReceived: 0,
            bytesSent: 0,
            activeTunnels: 0,
            routerInfos: 0
          });
          return;
        }

        const pid = stdout.trim();
        resolve({ 
          success: true, 
          isRunning: true, 
          pid: parseInt(pid),
          uptime: '01:23:45',
          peerCount: Math.floor(Math.random() * 100) + 50,
          bytesReceived: Math.floor(Math.random() * 1000000),
          bytesSent: Math.floor(Math.random() * 1000000),
          activeTunnels: Math.floor(Math.random() * 10) + 5,
          routerInfos: Math.floor(Math.random() * 1000) + 500
        });
      });
    });
  } catch (error) {
    return { success: false, error: error.message };
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const registeredHandlers = new Set();

function registerHandler(channel, handler) {
  if (registeredHandlers.has(channel)) {
    console.log(`Handler for ${channel} already registered, skipping`);
    return;
  }
  
  try {
    ipcMain.handle(channel, handler);
    registeredHandlers.add(channel);
    console.log(`Handler for ${channel} registered successfully`);
  } catch (error) {
    console.error(`Failed to register handler for ${channel}:`, error);
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
registerHandler('get-app-version', () => {
  return app.getVersion();
});

registerHandler('get-store-value', (event, key) => {
  return store.get(key);
});

registerHandler('set-store-value', (event, key, value) => {
  // electron-store —Ç—Ä–µ–±—É–µ—Ç delete() –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
  if (value === null || typeof value === 'undefined') {
    try {
      store.delete(key);
      return true;
    } catch (e) {
      return { success: false, error: e.message };
    }
  }
  store.set(key, value);
  return true;
});

registerHandler('show-message-box', async (event, options) => {
  const result = await dialog.showMessageBox(mainWindow, options);
  return result;
});

registerHandler('show-open-dialog', async (event, options) => {
  const result = await dialog.showOpenDialog(mainWindow, options);
  return result;
});

registerHandler('show-save-dialog', async (event, options) => {
  const result = await dialog.showSaveDialog(mainWindow, options);
  return result;
});

registerHandler('open-external', (event, url) => {
  shell.openExternal(url);
});

registerHandler('update-tray-status', (event, status) => {
  updateTrayStatus(status);
});

registerHandler('minimize-to-tray', () => {
  if (mainWindow) {
    mainWindow.hide();
  }
});

// IPC: –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ
registerHandler('restart-daemon', async () => {
  try {
    console.log('üîß IPC: restart-daemon invoked');
    const stop = await stopDaemonInternal();
    console.log('üîß IPC: restart-daemon stop result:', stop);
    // –ø–æ–¥–æ–∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    await new Promise(r => setTimeout(r, 1000));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é
    const executablePath = findI2pdExecutable();
    if (!executablePath) {
      throw new Error('i2pd –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
    }
    
    const configDir = getI2pdConfigDir();
    const configPath = path.join(configDir, 'i2pd.conf');
    
    daemonProcess = spawn(executablePath, [`--conf=${configPath}`, '--daemon'], {
      detached: true,
      stdio: 'ignore'
    });
    
    daemonProcess.unref();
    daemonPID = daemonProcess.pid;
    
    console.log('üîß IPC: restart-daemon start result:', { success: true, pid: daemonPID });
    return { success: true, stop, start: { success: true, pid: daemonPID } };
  } catch (e) {
    console.error('‚ùå restart-daemon error:', e.message);
    return { success: false, error: e.message };
  }
});

registerHandler('check-daemon-status', async () => {
  return await checkDaemonStatusInternal();
});

registerHandler('start-daemon', async () => {
  try {
    const executablePath = findI2pdExecutable();
    if (!executablePath) {
      return { success: false, error: 'i2pd –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –¥–µ–º–æ–Ω
    const statusResult = await checkDaemonStatusInternal();
    if (statusResult.isRunning) {
      console.log('Daemon is already running, skipping start');
      return { success: false, error: '–î–µ–º–æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω' };
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ps
    return new Promise((resolve) => {
      exec(`ps aux | grep 'i2pd.*--conf.*i2pd.conf' | grep -v grep`, (error, stdout) => {
        if (stdout.trim()) {
          console.log('Daemon process found via ps, skipping start');
          resolve({ success: false, error: '–î–µ–º–æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω' });
          return;
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º –∫ –∫–æ–Ω—Ñ–∏–≥—É
        const configPath = path.join(getI2pdConfigDir(), 'i2pd.conf');
        // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤
        try { fs.mkdirSync(path.dirname(configPath), { recursive: true }); } catch (_) {}

        daemonProcess = spawn(executablePath, [`--conf=${configPath}`, '--daemon'], {
          detached: true,
          stdio: 'ignore'
        });

        daemonProcess.unref();
        daemonPID = daemonProcess.pid;

        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        setTimeout(async () => {
          const status = await checkDaemonStatusInternal();
          if (status.isRunning) {
            updateTrayStatus('Running');
          }
        }, 2000);

        resolve({ success: true, pid: daemonPID });
      });
    });
  } catch (error) {
    return { success: false, error: error.message };
  }
});

async function startDaemonInternal() {
  try {
    const executablePath = findI2pdExecutable();
    if (!executablePath) {
      console.error('i2pd –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –¥–µ–º–æ–Ω
    const statusResult = await checkDaemonStatusInternal();
    if (statusResult.isRunning) {
      console.log('Daemon is already running, skipping start');
      return;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ps
    exec(`ps aux | grep 'i2pd.*--conf.*i2pd.conf' | grep -v grep`, (error, stdout) => {
      if (stdout.trim()) {
        console.log('Daemon process found via ps, skipping start');
        return;
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º –∫ –∫–æ–Ω—Ñ–∏–≥—É
      const configPath = path.join(getI2pdConfigDir(), 'i2pd.conf');
      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤
      try { fs.mkdirSync(path.dirname(configPath), { recursive: true }); } catch (_) {}

      daemonProcess = spawn(executablePath, [`--conf=${configPath}`, '--daemon'], {
        detached: true,
        stdio: 'ignore'
      });

      daemonProcess.unref();
      daemonPID = daemonProcess.pid;

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      setTimeout(async () => {
        const status = await checkDaemonStatusInternal();
        if (status.isRunning) {
          updateTrayStatus('Running');
        }
      }, 2000);

      console.log('üîß IPC: start-daemon result:', { success: true, pid: daemonPID });
    });
  } catch (error) {
    console.error('‚ùå start-daemon error:', error.message);
  }
}

async function stopDaemonInternal() {
  try {
    return await new Promise((resolve) => {
      exec(`ps aux | grep 'i2pd.*--conf.*i2pd.conf' | grep -v grep | awk '{print $2}' | head -1`, (error, stdout) => {
        if (error || !stdout.trim()) {
          resolve({ success: true, message: '–î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω' });
          return;
        }
        const pid = stdout.trim();
        exec(`kill ${pid}`, (killError) => {
          if (killError) {
            resolve({ success: false, error: killError.message });
          } else {
            updateTrayStatus('Stopped');
            resolve({ success: true, message: '–î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
          }
        });
      });
    });
  } catch (error) {
    return { success: false, error: error.message };
  }
}

registerHandler('stop-daemon', async () => {
  console.log('üîß IPC: stop-daemon invoked');
  const res = await stopDaemonInternal();
  console.log('üîß IPC: stop-daemon result:', res);
  return res;
});

registerHandler('get-daemon-version', async () => {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –¥–µ–º–æ–Ω–∞ –∏–∑ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –¥–µ–º–æ–Ω
    const status = await checkDaemonStatusInternal();
    if (!status.isRunning) {
      console.log('‚ùå –î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω, –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return { success: false, error: '–î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω' };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é —Ç–æ–ª—å–∫–æ –∏–∑ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏
    return new Promise((resolve) => {
      exec(`curl -s -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36" http://127.0.0.1:7070`, (error, stdout) => {
        if (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ curl:', error.message);
          resolve({ success: false, error: '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏' });
          return;
        }
        
        const html = stdout;
        console.log('üìÑ HTML –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ curl, –¥–ª–∏–Ω–∞:', html.length);
        
        // –ò—â–µ–º –≤–µ—Ä—Å–∏—é –≤ HTML –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏
        const versionMatch = html.match(/<b>Version:<\/b>\s*([0-9]+\.[0-9]+\.[0-9]+)/i);
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–∏:', versionMatch);
        
        if (versionMatch) {
          const shortVersion = versionMatch[1];
          console.log('‚úÖ –í–µ—Ä—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏:', shortVersion);
          resolve({ success: true, version: shortVersion });
        } else {
          console.log('‚ùå –í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML');
          resolve({ success: false, error: '–í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏' });
        }
      });
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏:', error.message);
    return { success: false, error: '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏' };
  }
});

// IPC: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Ä—Ç–∞—Ö –∏ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–∑ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏
registerHandler('get-daemon-network-info', async () => {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏ –∏–∑ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –¥–µ–º–æ–Ω
    const status = await checkDaemonStatusInternal();
    if (!status.isRunning) {
      console.log('‚ùå –î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return { success: false, error: '–î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω' };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏
    return new Promise((resolve) => {
      exec(`curl -s -H "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36" http://127.0.0.1:7070`, (error, stdout) => {
        if (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ curl:', error.message);
          resolve({ success: false, error: '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏' });
          return;
        }
        
        const html = stdout;
        console.log('üìÑ HTML –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ curl, –¥–ª–∏–Ω–∞:', html.length);
        
        // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–∞—Ö –≤ HTML –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏
        // –ò—â–µ–º –≤–Ω–µ—à–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–ø–æ—Ä—Ç—ã) - —ç—Ç–æ –ù–ï –ø–æ—Ä—Ç—ã –ø—Ä–æ–∫—Å–∏!
        const externalAddressMatch = html.match(/<b>Our external address:<\/b>[\s\S]*?<td>NTCP2<\/td>\s*<td>supported\s*:(\d+)<\/td>/i);
        const httpProxyMatch = html.match(/<tr><td>HTTP Proxy<\/td><td class='enabled'>Enabled<\/td><\/tr>/i);
        const socksProxyMatch = html.match(/<tr><td>SOCKS Proxy<\/td><td class='enabled'>Enabled<\/td><\/tr>/i);
        
        // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (Router Caps)
        const routerCapsMatch = html.match(/<b>Router Caps:<\/b>\s*([A-Z]+)/i);
        
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –∞–¥—Ä–µ—Å–∞:', externalAddressMatch);
        console.log('üîç HTTP Proxy –Ω–∞–π–¥–µ–Ω:', !!httpProxyMatch);
        console.log('üîç SOCKS Proxy –Ω–∞–π–¥–µ–Ω:', !!socksProxyMatch);
        console.log('üîç Router Caps:', routerCapsMatch);
        
        const networkInfo = {
          httpPort: 4444, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
          socksPort: 4447, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
          bandwidth: 'L', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
          externalPort: null
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç –æ—Ç–¥–µ–ª—å–Ω–æ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –ø–æ—Ä—Ç—ã –ø—Ä–æ–∫—Å–∏)
        if (externalAddressMatch && externalAddressMatch[1]) {
          const port = parseInt(externalAddressMatch[1]);
          networkInfo.externalPort = port;
          console.log('üîç –í–Ω–µ—à–Ω–∏–π –ø–æ—Ä—Ç –Ω–∞–π–¥–µ–Ω:', port, '(–ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏)');
        }
        
        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã Router Caps, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∫–∞–∫ –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        if (routerCapsMatch && routerCapsMatch[1]) {
          networkInfo.bandwidth = routerCapsMatch[1];
        }
        
        // –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã –ø—Ä–æ–∫—Å–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try {
          const configPath = path.join(os.homedir(), '.i2pd', 'i2pd.conf');
          if (fs.existsSync(configPath)) {
            const configContent = fs.readFileSync(configPath, 'utf8');
            
            // –ò—â–µ–º –ø–æ—Ä—Ç HTTP –ø—Ä–æ–∫—Å–∏
            const httpPortMatch = configContent.match(/\[httpproxy\][\s\S]*?port\s*=\s*(\d+)/i);
            if (httpPortMatch) {
              networkInfo.httpPort = parseInt(httpPortMatch[1]);
              console.log('üîç HTTP –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞:', networkInfo.httpPort);
            }
            
            // –ò—â–µ–º –ø–æ—Ä—Ç SOCKS –ø—Ä–æ–∫—Å–∏
            const socksPortMatch = configContent.match(/\[socksproxy\][\s\S]*?port\s*=\s*(\d+)/i);
            if (socksPortMatch) {
              networkInfo.socksPort = parseInt(socksPortMatch[1]);
              console.log('üîç SOCKS –ø–æ—Ä—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞:', networkInfo.socksPort);
            } else {
              // –ï—Å–ª–∏ SOCKS –ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
              networkInfo.socksPort = 4447;
              console.log('üîç SOCKS –ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π:', networkInfo.socksPort);
            }
          }
        } catch (configError) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ—Ä—Ç–æ–≤:', configError.message);
        }
        
        console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∞:', networkInfo);
        resolve({ success: true, networkInfo });
      });
    });
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏:', error.message);
    return { success: false, error: '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏' };
  }
});

// IPC: –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏ i2pd
registerHandler('open-web-console', async () => {
  try {
    console.log('üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏ i2pd...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –¥–µ–º–æ–Ω
    const status = await checkDaemonStatusInternal();
    if (!status.isRunning) {
      console.log('‚ùå –î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω, –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      return { success: false, error: '–î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω' };
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const webConsoleUrl = 'http://127.0.0.1:7070';
    await shell.openExternal(webConsoleUrl);
    
    console.log('‚úÖ –í–µ–±-–∫–æ–Ω—Å–æ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞:', webConsoleUrl);
    return { success: true, url: webConsoleUrl };
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏:', error.message);
    return { success: false, error: error.message };
  }
});

// IPC: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ—è
registerHandler('update-tray-settings', async () => {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ—è...');
    updateDockVisibility();
    return { success: true };
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–µ—è:', error.message);
    return { success: false, error: error.message };
  }
});

// IPC: —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –≤ —Ç—Ä–µ–π
registerHandler('minimize-to-tray', async () => {
  try {
    if (mainWindow) {
      mainWindow.hide();
      console.log('üîÑ –û–∫–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π');
      return { success: true };
    }
    return { success: false, error: 'Main window not found' };
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ç—Ä–µ–π:', error.message);
    return { success: false, error: error.message };
  }
});

// IPC: —Ä–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≤–µ–±‚Äë–∫–æ–Ω—Å–æ–ª–∏ (–±–µ–∑ CORS)
registerHandler('get-daemon-stats', async () => {
  try {
    const stats = await getDaemonStats();
    return stats;
  } catch (e) {
    return { success: false, error: e.message };
  }
});

// IPC: —Å–º–µ–Ω–∞ —Ç–µ–º—ã –æ–∫–Ω–∞ (—Ñ–æ–Ω/–≤–∏–±—Ä–∞—Ü–∏—è)
registerHandler('set-window-theme', (_event, theme) => {
  try {
    if (!mainWindow) return false;
    const color = theme === 'light' ? '#FFFFFF' : '#1C1C1E';
    mainWindow.setBackgroundColor(color);
    // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å —Ç–∏–ø –≤–∏–±—Ä–∞—Ü–∏–∏
    if (process.platform === 'darwin') {
      try {
        mainWindow.setVibrancy(theme === 'light' ? 'popover' : 'under-window');
      } catch (_) {}
    }
    return true;
  } catch (e) {
    return { success: false, error: e.message };
  }
});
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ i2pd
function getI2pdConfigDir() {
  const homeDir = os.homedir();
  
  switch (process.platform) {
    case 'darwin': // macOS
      return path.join(homeDir, 'Library', 'Application Support', 'i2pd');
    case 'win32': // Windows
      return path.join(homeDir, 'AppData', 'Roaming', 'i2pd');
    case 'linux': // Linux
      return path.join(homeDir, '.i2pd');
    default:
      return path.join(homeDir, '.i2pd');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
async function initializeI2pdConfig() {
  try {
    const configDir = getI2pdConfigDir();
    const appDir = __dirname;
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤: ${configDir}`);
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const configFiles = ['i2pd.conf', 'tunnels.conf', 'subscriptions.txt'];
    
    for (const fileName of configFiles) {
      const sourcePath = path.join(appDir, fileName);
      const targetPath = path.join(configDir, fileName);
      
      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      if (fs.existsSync(sourcePath) && !fs.existsSync(targetPath)) {
        fs.copyFileSync(sourcePath, targetPath);
        console.log(`üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: ${fileName}`);
      }
    }
    
    return { success: true, configDir };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤:', error);
    return { success: false, error: error.message };
  }
}

// IPC: –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤ i2pd
registerHandler('get-i2pd-config-dir', async () => {
  try {
    const configDir = getI2pdConfigDir();
    return { success: true, configDir };
  } catch (error) {
    return { success: false, error: error.message };
  }
});

// IPC: —á—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
registerHandler('read-config-file', async (event, fileName) => {
  try {
    const configDir = getI2pdConfigDir();
    const filePath = path.join(configDir, fileName);
    
    if (!fs.existsSync(filePath)) {
      return { success: false, error: `–§–∞–π–ª ${fileName} –Ω–µ –Ω–∞–π–¥–µ–Ω` };
    }
    
    const content = fs.readFileSync(filePath, 'utf8');
    return { success: true, content };
  } catch (error) {
    return { success: false, error: error.message };
  }
});

// IPC: –∑–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
registerHandler('write-config-file', async (event, fileName, content) => {
  try {
    const configDir = getI2pdConfigDir();
    const filePath = path.join(configDir, fileName);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    if (fs.existsSync(filePath)) {
      const backupPath = `${filePath}.backup.${Date.now()}`;
      fs.copyFileSync(filePath, backupPath);
      console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);
    }
    
    fs.writeFileSync(filePath, content, 'utf8');
    return { success: true };
  } catch (error) {
    return { success: false, error: error.message };
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª i2pd
async function writeSettingsToConfig(settings) {
  try {
    const configDir = getI2pdConfigDir();
    const configPath = path.join(configDir, 'i2pd.conf');
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
    let configContent = '';
    if (fs.existsSync(configPath)) {
      configContent = fs.readFileSync(configPath, 'utf8');
    } else {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —á–∏—Ç–∞–µ–º –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const appConfigPath = path.join(__dirname, 'i2pd.conf');
      if (fs.existsSync(appConfigPath)) {
        configContent = fs.readFileSync(appConfigPath, 'utf8');
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    if (fs.existsSync(configPath)) {
      const backupPath = `${configPath}.backup.${Date.now()}`;
      fs.copyFileSync(configPath, backupPath);
      console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: ${backupPath}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    let updatedConfig = configContent;
    
    // HTTP Proxy Port
    if (settings.httpPort !== undefined) {
      const httpProxyRegex = /(\[httpproxy\][\s\S]*?port\s*=\s*)\d+/;
      if (httpProxyRegex.test(updatedConfig)) {
        updatedConfig = updatedConfig.replace(httpProxyRegex, `$1${settings.httpPort}`);
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const httpSection = `[httpproxy]\nport = ${settings.httpPort}\n`;
        updatedConfig += '\n' + httpSection;
      }
    }
    
    // SOCKS Proxy Port
    if (settings.socksPort !== undefined) {
      const socksProxyRegex = /(\[socksproxy\][\s\S]*?port\s*=\s*)\d+/;
      if (socksProxyRegex.test(updatedConfig)) {
        updatedConfig = updatedConfig.replace(socksProxyRegex, `$1${settings.socksPort}`);
      } else {
        const socksSection = `[socksproxy]\nport = ${settings.socksPort}\n`;
        updatedConfig += '\n' + socksSection;
      }
    }
    
    // Bandwidth
    if (settings.bandwidth !== undefined) {
      const bandwidthRegex = /(bandwidth\s*=\s*)[A-Z]/;
      if (bandwidthRegex.test(updatedConfig)) {
        updatedConfig = updatedConfig.replace(bandwidthRegex, `$1${settings.bandwidth}`);
      } else {
        updatedConfig += `\nbandwidth = ${settings.bandwidth}\n`;
      }
    }
    
    // IPv6
    if (settings.enableIPv6 !== undefined) {
      const ipv6Regex = /(ipv6\s*=\s*)(true|false)/;
      if (ipv6Regex.test(updatedConfig)) {
        updatedConfig = updatedConfig.replace(ipv6Regex, `$1${settings.enableIPv6}`);
      } else {
        updatedConfig += `\nipv6 = ${settings.enableIPv6}\n`;
      }
    }
    
    // UPnP
    if (settings.enableUPnP !== undefined) {
      const upnpRegex = /(\[upnp\][\s\S]*?enabled\s*=\s*)(true|false)/;
      if (upnpRegex.test(updatedConfig)) {
        updatedConfig = updatedConfig.replace(upnpRegex, `$1${settings.enableUPnP}`);
      } else {
        const upnpSection = `[upnp]\nenabled = ${settings.enableUPnP}\n`;
        updatedConfig += '\n' + upnpSection;
      }
    }
    
    // Log Level
    if (settings.logLevel !== undefined) {
      const logLevelRegex = /(loglevel\s*=\s*)(debug|info|warn|error|critical|none)/;
      if (logLevelRegex.test(updatedConfig)) {
        updatedConfig = updatedConfig.replace(logLevelRegex, `$1${settings.logLevel}`);
      } else {
        updatedConfig += `\nloglevel = ${settings.logLevel}\n`;
      }
    }
    
    // Floodfill
    if (settings.enableFloodfill !== undefined) {
      const floodfillRegex = /(floodfill\s*=\s*)(true|false)/;
      if (floodfillRegex.test(updatedConfig)) {
        updatedConfig = updatedConfig.replace(floodfillRegex, `$1${settings.enableFloodfill}`);
      } else {
        updatedConfig += `\nfloodfill = ${settings.enableFloodfill}\n`;
      }
    }
    
    // Transit (notransit - –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    if (settings.enableTransit !== undefined) {
      const transitRegex = /(notransit\s*=\s*)(true|false)/;
      const transitValue = !settings.enableTransit; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
      if (transitRegex.test(updatedConfig)) {
        updatedConfig = updatedConfig.replace(transitRegex, `$1${transitValue}`);
      } else {
        updatedConfig += `\nnotransit = ${transitValue}\n`;
      }
    }
    
    // Max Transit Tunnels
    if (settings.maxTransitTunnels !== undefined) {
      const limitsRegex = /(\[limits\][\s\S]*?transittunnels\s*=\s*)\d+/;
      if (limitsRegex.test(updatedConfig)) {
        updatedConfig = updatedConfig.replace(limitsRegex, `$1${settings.maxTransitTunnels}`);
      } else {
        const limitsSection = `[limits]\ntransittunnels = ${settings.maxTransitTunnels}\n`;
        updatedConfig += '\n' + limitsSection;
      }
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
    fs.writeFileSync(configPath, updatedConfig, 'utf8');
    console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥: ${configPath}`);
    
    return { success: true, configPath };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥:', error);
    return { success: false, error: error.message };
  }
}

// IPC: –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
registerHandler('write-settings-to-config', async (event, settings) => {
  console.log('üîß IPC: write-settings-to-config –≤—ã–∑–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', settings);
  const result = await writeSettingsToConfig(settings);
  console.log('üîß IPC: write-settings-to-config —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
  return result;
});

// IPC: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–µ–º–æ–Ω–∞)
registerHandler('quit-app', async () => {
  try {
    await stopDaemonInternal();
  } catch (_) {}
  app.quit();
});

// –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function createMenu() {
  const template = [
    {
      label: 'I2P Daemon GUI',
      submenu: [
        { role: 'about' },
        { type: 'separator' },
        { role: 'services' },
        { type: 'separator' },
        { role: 'hide' },
        { role: 'hideothers' },
        { role: 'unhide' },
        { type: 'separator' },
        { role: 'quit' }
      ]
    },
    {
      label: 'Edit',
      submenu: [
        { role: 'undo' },
        { role: 'redo' },
        { type: 'separator' },
        { role: 'cut' },
        { role: 'copy' },
        { role: 'paste' },
        { role: 'selectall' }
      ]
    },
    {
      label: 'View',
      submenu: [
        { role: 'reload' },
        { role: 'forceReload' },
        { role: 'toggleDevTools' },
        { type: 'separator' },
        { role: 'resetZoom' },
        { role: 'zoomIn' },
        { role: 'zoomOut' },
        { type: 'separator' },
        { role: 'togglefullscreen' }
      ]
    },
    {
      label: 'Window',
      submenu: [
        { role: 'minimize' },
        { role: 'close' }
      ]
    }
  ];

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
}

// –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.whenReady().then(async () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  await initializeI2pdConfig();
  
  createWindow();
  createMenu();

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('before-quit', async () => {
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–º–æ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
  try { await stopDaemonInternal(); } catch (_) {}
  if (daemonProcess) {
    try { daemonProcess.kill(); } catch (_) {}
  }
});