import { useState, useEffect, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import { DEFAULT_SETTINGS } from '../constants/settings';

// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const useSettings = (electronAPI) => {
  const { t } = useTranslation();
  const [settings, setSettings] = useState(DEFAULT_SETTINGS);
  const [isLoading, setIsLoading] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const loadSettings = useCallback(async () => {
    if (!electronAPI) {
      // –í –±—Ä–∞—É–∑–µ—Ä–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
      try {
        const savedSettings = localStorage.getItem('i2pd-settings');
        if (savedSettings) {
          const parsed = JSON.parse(savedSettings);
          setSettings({ ...DEFAULT_SETTINGS, ...parsed });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage:', error);
      }
      return;
    }

    setIsLoading(true);
    try {
      const loadedSettings = {};
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
      for (const [key, defaultValue] of Object.entries(DEFAULT_SETTINGS)) {
        try {
          const value = await electronAPI.invoke('get-store-value', key);
          loadedSettings[key] = (value === null || typeof value === 'undefined') ? defaultValue : value;
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${key}:`, error);
          loadedSettings[key] = defaultValue;
        }
      }
      
      setSettings(loadedSettings);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    } finally {
      setIsLoading(false);
    }
  }, [electronAPI]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const saveSettings = useCallback(async (newSettings) => {
    if (!electronAPI) {
      // –í –±—Ä–∞—É–∑–µ—Ä–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      try {
        localStorage.setItem('i2pd-settings', JSON.stringify(newSettings));
        setSettings(newSettings);
        return true;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ localStorage:', error);
        return false;
      }
    }

    setIsSaving(true);
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ –≤ electron-store
      for (const [key, value] of Object.entries(newSettings)) {
        try {
          await electronAPI.invoke('set-store-value', key, value);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${key}:`, error);
          throw error;
        }
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –¥–µ–º–æ–Ω
      const daemonSettings = {
        httpPort: newSettings.httpPort,
        socksPort: newSettings.socksPort,
        bandwidth: newSettings.bandwidth,
        enableIPv6: newSettings.enableIPv6,
        enableUPnP: newSettings.enableUPnP,
        logLevel: newSettings.logLevel,
        enableFloodfill: newSettings.enableFloodfill,
        enableTransit: newSettings.enableTransit,
        maxTransitTunnels: newSettings.maxTransitTunnels
      };
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ–º–æ–Ω–∞
      const changedDaemonSettings = {};
      for (const [key, value] of Object.entries(daemonSettings)) {
        if (value !== undefined && value !== settings[key]) {
          changedDaemonSettings[key] = value;
        }
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ–º–æ–Ω–∞, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö –≤ –∫–æ–Ω—Ñ–∏–≥
      if (Object.keys(changedDaemonSettings).length > 0) {
        console.log('üìù –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–Ω—Ñ–∏–≥:', changedDaemonSettings);
        
        const configResult = await electronAPI.invoke('write-settings-to-config', changedDaemonSettings);
        if (!configResult.success) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–Ω—Ñ–∏–≥: ${configResult.error}`);
        }
        
        console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –¥–µ–º–æ–Ω
        const statusResult = await electronAPI.invoke('check-daemon-status');
        if (statusResult.isRunning) {
          console.log('üîÑ –î–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        } else {
          console.log('‚ÑπÔ∏è –î–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ');
        }
      } else {
        console.log('‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–µ–º–æ–Ω–∞, –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
      }
      
      setSettings(newSettings);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return false;
    } finally {
      setIsSaving(false);
    }
  }, [electronAPI, settings]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const updateSetting = useCallback(async (key, value) => {
    const newSettings = { ...settings, [key]: value };
    return await saveSettings(newSettings);
  }, [settings, saveSettings]);

  // –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const resetSettings = useCallback(async () => {
    return await saveSettings(DEFAULT_SETTINGS);
  }, [saveSettings]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const validateSettings = useCallback((settingsToValidate) => {
    const errors = {};
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤
    if (settingsToValidate.httpPort < 1024 || settingsToValidate.httpPort > 65535) {
      errors.httpPort = t('HTTP port must be in range 1024-65535');
    }
    
    if (settingsToValidate.socksPort < 1024 || settingsToValidate.socksPort > 65535) {
      errors.socksPort = t('SOCKS port must be in range 1024-65535');
    }
    
    if (settingsToValidate.httpPort === settingsToValidate.socksPort) {
      errors.socksPort = t('SOCKS port must be different from HTTP port');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (settingsToValidate.updateInterval < 1 || settingsToValidate.updateInterval > 60) {
      errors.updateInterval = t('Update interval must be between 1 and 60 seconds');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ç—É–Ω–Ω–µ–ª–µ–π
    if (settingsToValidate.maxTransitTunnels < 100 || settingsToValidate.maxTransitTunnels > 50000) {
      errors.maxTransitTunnels = t('Maximum tunnels must be between 100 and 50000');
    }
    
    return errors;
  }, [t]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadSettings();
  }, [loadSettings]);

  return {
    settings,
    isLoading,
    isSaving,
    loadSettings,
    saveSettings,
    updateSetting,
    resetSettings,
    validateSettings
  };
};

