#!/usr/bin/env node

const os = require('os');
const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π...');

const platform = os.platform();
const arch = os.arch();

console.log(`üìã –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${platform}`);
console.log(`üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${arch}`);

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
const configPaths = {
  'linux': path.join(os.homedir(), '.i2pd'),
  'darwin': path.join(os.homedir(), 'Library', 'Application Support', 'i2pd'),
  'win32': path.join(os.homedir(), 'AppData', 'Roaming', 'i2pd')
};

const executablePaths = {
  'linux': 'Lin/i2pd',
  'darwin': 'Mac/i2pd',
  'win32': 'Win/i2pd.exe'
};

const configPath = configPaths[platform] || path.join(os.homedir(), '.i2pd');
const executablePath = executablePaths[platform];

console.log(`üìÅ –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É: ${configPath}`);
console.log(`‚öôÔ∏è –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É: ${executablePath}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
const fullExecutablePath = path.join(__dirname, executablePath);
if (!fs.existsSync(fullExecutablePath)) {
  console.error(`‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${fullExecutablePath}`);
  process.exit(1);
}

console.log(`‚úÖ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${fullExecutablePath}`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è Linux
if (platform === 'linux') {
  try {
    fs.accessSync(fullExecutablePath, fs.constants.X_OK);
    console.log('‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } catch (error) {
    console.log('‚ö†Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');
    fs.chmodSync(fullExecutablePath, '755');
    console.log('‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  }
}

// –î–ª—è Linux –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–æ–Ω—Ñ–∏–≥–æ–≤
if (platform === 'linux') {
  if (!fs.existsSync(configPath)) {
    console.log(`‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${configPath} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    console.log(`üìÅ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: ${__dirname}`);
  } else {
    console.log(`‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${configPath}`);
  }
}

// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const platformInfo = {
  platform,
  arch,
  configPath,
  executablePath,
  timestamp: new Date().toISOString()
};

fs.writeFileSync(
  path.join(__dirname, 'platform-info.json'),
  JSON.stringify(platformInfo, null, 2)
);

console.log('üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ platform-info.json');
console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
